From 0fb1911f150fb872d8f6ee3aa71022185c28858d Mon Sep 17 00:00:00 2001
From: Miguel Bernal Marin <miguel.bernal.marin@linux.intel.com>
Date: Wed, 29 Aug 2018 06:12:19 -0500
Subject: [PATCH 8010/8021] misc: intel: sepdk: add S source files from vtsspp

---
 drivers/misc/intel/sepdk/vtsspp/sys32.S  | 150 +++++++++++++++++++++++
 drivers/misc/intel/sepdk/vtsspp/sys64.S  |  93 ++++++++++++++
 drivers/misc/intel/sepdk/vtsspp/sysKNX.S |  69 +++++++++++
 3 files changed, 312 insertions(+)
 create mode 100644 drivers/misc/intel/sepdk/vtsspp/sys32.S
 create mode 100644 drivers/misc/intel/sepdk/vtsspp/sys64.S
 create mode 100644 drivers/misc/intel/sepdk/vtsspp/sysKNX.S

diff --git a/drivers/misc/intel/sepdk/vtsspp/sys32.S b/drivers/misc/intel/sepdk/vtsspp/sys32.S
new file mode 100644
index 000000000000..c440aee61b72
--- /dev/null
+++ b/drivers/misc/intel/sepdk/vtsspp/sys32.S
@@ -0,0 +1,150 @@
+/*
+  Copyright (C) 2010-2014 Intel Corporation.  All Rights Reserved.
+
+  This file is part of SEP Development Kit
+
+  SEP Development Kit is free software; you can redistribute it
+  and/or modify it under the terms of the GNU General Public License
+  version 2 as published by the Free Software Foundation.
+
+  SEP Development Kit is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with SEP Development Kit; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
+
+  As a special exception, you may use this file as part of a free software
+  library without restriction.  Specifically, if other files instantiate
+  templates or use macros or inline functions from this file, or you compile
+  this file and link it with other files to produce an executable, this
+  file does not by itself cause the resulting executable to be covered by
+  the GNU General Public License.  This exception does not however
+  invalidate any other reasons why the executable file might be covered by
+  the GNU General Public License.
+*/
+#include <linux/version.h>
+#include <asm/segment.h>
+
+#if LINUX_VERSION_CODE == KERNEL_VERSION(2,6,20)
+#define USE_KERNEL_PERCPU_SEGMENT_GS
+#endif
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,21) && LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,29)
+#define USE_KERNEL_PERCPU_SEGMENT_FS
+#endif
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,30)
+#define USE_KERNEL_PERCPU_SEGMENT_FS
+#define USE_KERNEL_PERCPU_SEGMENT_GS
+#endif
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20)
+#if !defined(__KERNEL_PERCPU)
+#define __KERNEL_PERCPU __KERNEL_PDA
+#endif
+#endif
+
+        .text
+        .align  4
+        .global vtss_io_delay
+vtss_io_delay:
+        ret
+
+/*
+ * User gs save/restore
+ *
+ * %gs is used for userland TLS and kernel only uses it for stack
+ * canary which is required to be at %gs:20 by gcc.  Read the comment
+ * at the top of stackprotector.h for more info.
+ */
+#ifdef CONFIG_X86_32_LAZY_GS
+
+/* unfortunately push/pop can't be no-op */
+.macro PUSH_GS
+        pushl $0
+.endm
+.macro POP_GS
+        addl $4, %esp
+.endm
+.macro SET_KERNEL_GS reg
+.endm
+
+#else  /* CONFIG_X86_32_LAZY_GS */
+
+.macro PUSH_GS
+        pushl %gs
+.endm
+.macro POP_GS
+        popl %gs
+.endm
+.macro SET_KERNEL_GS reg
+        movl $(__KERNEL_STACK_CANARY), \reg
+        movl \reg, %gs
+.endm
+
+#endif /* CONFIG_X86_32_LAZY_GS */
+
+        .align  16
+        .global vtss_perfvec_handler
+        .extern vtss_pmi_handler
+vtss_perfvec_handler:
+        pushl   %eax
+        cld
+#if defined(USE_KERNEL_PERCPU_SEGMENT_GS)
+        PUSH_GS
+#endif
+#if defined(USE_KERNEL_PERCPU_SEGMENT_FS)
+        pushl   %fs
+#endif
+        pushl   %es                     # SAVE_ALL macro to access pt_regs
+        pushl   %ds                     # inside our ISR.
+        pushl   %eax
+        pushl   %ebp
+        pushl   %edi
+        pushl   %esi
+        pushl   %edx
+        pushl   %ecx
+        pushl   %ebx
+
+        xorl    %eax, %eax
+        xorl    %edx, %edx
+        movl    $0x01d9, %ecx           # DEBUGCTL_MSR
+        wrmsr                           # disable branch tracing
+
+        movl    $(__KERNEL_DS), %edx    # Use KERNEL DS selector
+        movl    %edx, %ds               # Make sure we set Kernel
+        movl    %edx, %es               # DS into local DS and ES
+
+#if defined(USE_KERNEL_PERCPU_SEGMENT_FS)
+        movl    $(__KERNEL_PERCPU), %edx # Use kernel percpu segment
+        movl    %edx, %fs                # ... and load it into %fs
+#endif
+#if defined(USE_KERNEL_PERCPU_SEGMENT_GS)
+        SET_KERNEL_GS %edx
+#endif
+
+        movl    %esp, %ebx              # get ready to put *pt_regs on stack
+        pushl   %ebx                    # put *pt_regs on the stack
+        call    vtss_pmi_handler
+        addl    $0x4, %esp              # pop to nowhere...
+
+        pop     %ebx                    # restore register set
+        pop     %ecx
+        pop     %edx
+        pop     %esi
+        pop     %edi
+        pop     %ebp
+        pop     %eax
+        pop     %ds
+        pop     %es
+#if defined(USE_KERNEL_PERCPU_SEGMENT_FS)
+        pop     %fs
+#endif
+#if defined(USE_KERNEL_PERCPU_SEGMENT_GS)
+        POP_GS
+#endif
+        pop     %eax
+        iret
diff --git a/drivers/misc/intel/sepdk/vtsspp/sys64.S b/drivers/misc/intel/sepdk/vtsspp/sys64.S
new file mode 100644
index 000000000000..c05743fa710f
--- /dev/null
+++ b/drivers/misc/intel/sepdk/vtsspp/sys64.S
@@ -0,0 +1,93 @@
+/*
+  Copyright (C) 2010-2014 Intel Corporation.  All Rights Reserved.
+
+  This file is part of SEP Development Kit
+
+  SEP Development Kit is free software; you can redistribute it
+  and/or modify it under the terms of the GNU General Public License
+  version 2 as published by the Free Software Foundation.
+
+  SEP Development Kit is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with SEP Development Kit; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
+
+  As a special exception, you may use this file as part of a free software
+  library without restriction.  Specifically, if other files instantiate
+  templates or use macros or inline functions from this file, or you compile
+  this file and link it with other files to produce an executable, this
+  file does not by itself cause the resulting executable to be covered by
+  the GNU General Public License.  This exception does not however
+  invalidate any other reasons why the executable file might be covered by
+  the GNU General Public License.
+*/
+
+#include <asm/msr.h>
+#include "vtss_asm_helper.h"
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,1,0)
+#define USE_KERNEL_REGS_HELPER
+#endif
+
+        .text
+        .align  16
+        .global vtss_io_delay
+vtss_io_delay:
+        ret
+
+        .align  16
+        .global vtss_perfvec_handler
+        .extern vtss_pmi_handler
+vtss_perfvec_handler:
+        CFI_STARTPROC
+        pushq   %rax                    # fake an error code...
+        cld                             # cause the kernel likes it this way...
+
+#ifdef USE_KERNEL_REGS_HELPER
+        ALLOC_PT_GPREGS_ON_STACK
+        SAVE_C_REGS
+        SAVE_EXTRA_REGS
+#else
+        SAVE_ALL                        # Save the world!
+#endif
+
+        xorl    %eax, %eax
+        xorl    %edx, %edx
+        movl    $0x01d9, %ecx           # DEBUGCTL_MSR
+        wrmsr                           # disable branch tracing
+
+        movl    $MSR_GS_BASE, %ecx      # for the moment, do the safe swapgs check
+        rdmsr
+        xorl    %ebx, %ebx              # assume no swapgs (ebx == 0)
+        testl   %edx, %edx
+        js      1f                      # negative -> in kernel
+        SWAPGS
+        movl    $1, %ebx                # ebx == 1 means we did a swapgs
+1:      movq    %rsp, %rdi              # pt_regs is the first argument
+
+        # ebx is zero if no swap, one if swap
+        # ebx is preserved in C calling convention...
+        #
+        # NOTE: the C code is responsible for ACK'ing the APIC!!!
+        call    vtss_pmi_handler
+        # Don't want an interrupt while we are doing the swapgs stuff
+        cli
+        testl   %ebx, %ebx
+        jz      2f
+        SWAPGS
+
+#ifdef USE_KERNEL_REGS_HELPER
+2:      RESTORE_EXTRA_REGS
+        RESTORE_C_REGS
+        REMOVE_PT_GPREGS_FROM_STACK
+#else
+2:      RESTORE_ALL
+#endif
+
+        popq    %rax
+        iretq
+        CFI_ENDPROC
diff --git a/drivers/misc/intel/sepdk/vtsspp/sysKNX.S b/drivers/misc/intel/sepdk/vtsspp/sysKNX.S
new file mode 100644
index 000000000000..6693288b5796
--- /dev/null
+++ b/drivers/misc/intel/sepdk/vtsspp/sysKNX.S
@@ -0,0 +1,69 @@
+/*
+  Copyright (C) 2010-2014 Intel Corporation.  All Rights Reserved.
+
+  This file is part of SEP Development Kit
+
+  SEP Development Kit is free software; you can redistribute it
+  and/or modify it under the terms of the GNU General Public License
+  version 2 as published by the Free Software Foundation.
+
+  SEP Development Kit is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with SEP Development Kit; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
+
+  As a special exception, you may use this file as part of a free software
+  library without restriction.  Specifically, if other files instantiate
+  templates or use macros or inline functions from this file, or you compile
+  this file and link it with other files to produce an executable, this
+  file does not by itself cause the resulting executable to be covered by
+  the GNU General Public License.  This exception does not however
+  invalidate any other reasons why the executable file might be covered by
+  the GNU General Public License.
+*/
+#include <asm/dwarf2.h>
+#include <asm/calling.h>
+#include <asm/msr.h>
+
+        .text
+        .align  16
+        .global vtss_io_delay
+vtss_io_delay:
+        ret
+
+        .align  16
+        .global vtss_perfvec_handler
+        .extern vtss_pmi_handler
+vtss_perfvec_handler:
+        CFI_STARTPROC
+        pushq   %rax                    # fake an error code...
+        cld                             # cause the kernel likes it this way...
+        SAVE_ALL                        # Save the world!
+
+        movl    $MSR_GS_BASE, %ecx      # for the moment, do the safe swapgs check
+        rdmsr
+        xorl    %ebx, %ebx              # assume no swapgs (ebx == 0)
+        testl   %edx, %edx
+        js      1f                      # negative -> in kernel
+        SWAPGS
+        movl    $1, %ebx                # ebx == 1 means we did a swapgs
+1:      movq    %rsp, %rdi              # pt_regs is the first argument
+
+        # ebx is zero if no swap, one if swap
+        # ebx is preserved in C calling convention...
+        #
+        # NOTE: the C code is responsible for ACK'ing the APIC!!!
+        call    vtss_pmi_handler
+        # Don't want an interrupt while we are doing the swapgs stuff
+        cli
+        testl   %ebx, %ebx
+        jz      2f
+        SWAPGS
+2:      RESTORE_ALL
+        popq    %rax
+        iretq
+        CFI_ENDPROC
-- 
2.18.0

